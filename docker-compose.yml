version: '3.5'

services:
  authorization:
    container_name: authorization_db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=authorization
    image: postgres:13.11-bullseye
    ports:
      - '5434:5432'
    volumes:
      - authorization:/var/lib/postgresql/authorization
  file-manager:
    container_name: file_manager_db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=file_manager
    image: postgres:13.11-bullseye
    ports:
      - '5433:5432'
    volumes:
      - file_manager:/var/lib/postgresql/file_manager
#  authorization-microservice:
#    container_name: authorization-microservice
#    build:
#      context: ./authorization-microservice
#    depends_on:
#      - kafka
#    ports:
#      - "9200:9200"
#    environment:
#      - SPRING_DATASOURCE_USERNAME=postgres
#      - SPRING_DATASOURCE_PASSWORD=postgres
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://authorization_db:5432/authorization
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
#  file_manager:
#    container_name: file_manager
#    build:
#      context: ./file_manager
#    depends_on:
#      - kafka
#    ports:
#      - "9000:9000"
#    environment:
#      - SPRING_DATASOURCE_USERNAME=postgres
#      - SPRING_DATASOURCE_PASSWORD=postgres
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://file_manager_db:5432/file_manager
#      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
#     - SERVICE_AUTHENTICATION_IS-AUTHENTICATION_HOST=authorization-microservice
  zookeeper:
    container_name: zookeeper
    image: zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
    ports:
      - "22181:2181"
    volumes:
      - zookeeper:/var/lib/zookeeper
  kafka:
    image: bitnami/kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    volumes:
      - kafka:/var/lib/kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://192.168.0.107:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  mailserver:
    image: ghcr.io/docker-mailserver/docker-mailserver:latest
    container_name: mailserver
    # Provide the FQDN of your mail server here (Your DNS MX record should point to this value)
    hostname: authorization.kamegatze
    env_file: mailserver.env
    # More information about the mail-server ports:
    # https://docker-mailserver.github.io/docker-mailserver/latest/config/security/understanding-the-ports/
    ports:
      - "25:25"    # SMTP  (explicit TLS => STARTTLS, Authentication is DISABLED => use port 465/587 instead)
      - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
      - "465:465"  # ESMTP (implicit TLS)
      - "587:587"  # ESMTP (explicit TLS => STARTTLS)
      - "993:993"  # IMAP4 (implicit TLS)
    volumes:
      - ./docker-data/dms/mail-data/:/var/mail/
      - ./docker-data/dms/mail-state/:/var/mail-state/
      - ./docker-data/dms/mail-logs/:/var/log/mail/
      - ./docker-data/dms/config/:/tmp/docker-mailserver/
      - /etc/localtime:/etc/localtime:ro
      - ./docker-data/dms/rspamd/:/etc/rspamd/override.d/
      - ./docker-data/dms/custom-certs/:/tmp/dms/custom-certs/:ro
    restart: always
    stop_grace_period: 1m
    # Uncomment if using `ENABLE_FAIL2BAN=1`:
    # cap_add:
    #   - NET_ADMIN
    healthcheck:
      test: "ss --listening --tcp | grep -P 'LISTEN.+:smtp' || exit 1"
      timeout: 3s
      retries: 0


volumes:
  authorization:
  file_manager:
  kafka:
  zookeeper:
