version: '3.5'

services:
  nginx:
    image: nginx
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./logs/data:/var/log/nginx

  authorization-file-manager:
    container_name: authorization-file-manager
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=authorization
    image: postgres:13.11-bullseye
    ports:
      - '5434:5432'
    volumes:
      - ./authorization-file-manager/data:/var/lib/postgresql/data

  eureka-sever:
    container_name: eureka-server
    build:
      context: ../../eureka-server
    ports:
      - "8081:8081"
    environment:
      - EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE=http://eureka-sever:8081/eureka

  file-manager-file-system:
    container_name: file-manager-file-system
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=file_manager
    image: postgres:13.11-bullseye
    ports:
      - '5433:5432'
    volumes:
      - ./file-manager-file-system/data:/var/lib/postgresql/data

  authorization-microservice:
    container_name: authorization-microservice
    build:
      context: ../../authorization-microservice
    depends_on:
      - kafka-file-manager
      - eureka-sever
      - authorization-file-manager
    ports:
      - "9200:9200"
    environment:
      - spring.datasource.username=postgres
      - spring.datasource.password=postgres
      - spring.datasource.url=jdbc:postgresql://authorization-file-manager:5432/authorization
      - spring.kafka.bootstrap-servers=kafka-file-manager:29092
      - eureka.client.service-url.defaultZone=http://eureka-sever:8081/eureka
  #  file_manager:
  #    container_name: file_manager
  #    build:
  #      context: ../../file_manager
  #    depends_on:
  #      - kafka
  #    ports:
  #      - "9000:9000"
  #    environment:
  #      - SPRING_DATASOURCE_USERNAME=postgres
  #      - SPRING_DATASOURCE_PASSWORD=postgres
  #      - SPRING_DATASOURCE_URL=jdbc:postgresql://file-manager-file-system:5432/file_manager
  #      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka-file-manager:29092
  #     - SERVICE_AUTHENTICATION_IS-AUTHENTICATION_HOST=authorization-microservice
  zookeeper-file-manager:
    container_name: zookeeper-file-manager
    image: zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
    ports:
      - "22181:2181"
    volumes:
      - ./zookeeper/data/datalog:/datalog
      - ./zookeeper/data/data:/data


  kafka-file-manager:
    restart: always
    image: bitnami/kafka:latest
    depends_on:
      - zookeeper-file-manager
    ports:
      - "29092:29092"
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-file-manager:2181
      KAFKA_LISTENERS: INTERNAL://:9092,EXTERNAL_DIFFERENT_HOST://:29092,EXTERNAL_SAME_HOST://:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-file-manager:9092,EXTERNAL_SAME_HOST://kafka-file-manager:9093,EXTERNAL_DIFFERENT_HOST://kafka-file-manager:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL_DIFFERENT_HOST:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
